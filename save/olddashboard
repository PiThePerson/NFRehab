<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link rel="stylesheet" href="css/styles.css" />
    <link rel="stylesheet" href="css/main.css" />
    <style>
      /* Add language toggle styles */
      .language-toggle {
        position: absolute;
        top: 20px;
        right: 20px;
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 20px;
        padding: 5px 10px;
        cursor: pointer;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 100;
        font-weight: 600;
      }

      /* Add game mode toggle styles */
      .game-mode-toggle {
        display: flex;
        justify-content: center;
        margin: 15px 0;
      }

      .game-mode-container {
        display: flex;
        background: #e0e0e0;
        border-radius: 20px;
        padding: 4px;
        position: relative;
        width: 220px;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .game-mode-option {
        padding: 6px 15px;
        cursor: pointer;
        z-index: 2;
        transition: all 0.3s ease;
        text-align: center;
        width: 50%;
        font-weight: 600;
        color: #555;
        font-size: 0.9rem;
      }

      .game-mode-option.active {
        color: white;
      }

      .game-mode-slider {
        position: absolute;
        height: calc(100% - 8px);
        width: calc(50% - 8px);
        background: #4a6bff;
        border-radius: 16px;
        transition: all 0.3s ease;
        z-index: 1;
        top: 4px;
        left: 4px;
      }

      .game-mode-slider.multiplayer {
        left: calc(50% + 4px);
      }

      .dashboard-row {
        position: relative;
        /* main card box */
        .skins-card {
          position: absolute;
          top: 350px;
          right: -360px; /* keep it on-screen for testing */

          /* ‚îÄ‚îÄ hard size ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
          flex: none; /* cancels the 0 0 160px basis  */
          width: 25px !important; /* !important beats min-width */
          height: 8px !important;

          /* optional: hide everything except the üé® icon */
          overflow: hidden;

          padding: 0; /* remove extra space */
          display: flex;
          align-items: center;
          justify-content: center;
        }

        /* keep only the icon so text can't force a bigger box */
        .skins-card .stat-value {
          display: none;
        }
        .skins-card .stat-label {
          font-size: 14px; /* just the emoji */
          line-height: 1;
        }

        /* text inside the card */
        .skins-card .stat-label,
        .skins-card .stat-value {
          font-size: 0.9rem; /* shrink text */
          line-height: 1.1;
        }
      }
      /* === Fix text visibility in dashboard cards === */
      .stat-card .stat-label,
      .stat-card .stat-value {
        color: #1a1a1a !important;
        font-weight: 600;
        font-size: 1rem;
      }

      .stat-card {
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
      }
    </style>
  </head>
  <body>
    <div id="dashboard">
      <div class="dashboard">
        <!-- Language Toggle Button -->
        <button class="language-toggle" id="languageToggle">‡πÑ‡∏ó‡∏¢ / EN</button>

        <!-- Game Mode Toggle -->
        <div class="game-mode-toggle">
          <div class="game-mode-container">
            <div class="game-mode-option active" id="singlePlayerOption">
              Single-Player
            </div>
            <div class="game-mode-option" id="multiPlayerOption">
              Multi-Player
            </div>
            <div class="game-mode-slider" id="gameModeSlider"></div>
          </div>
        </div>

        <div class="logo-wrapper">
          <div class="logo-clip">
            <img
              src="../images/nfl2.png"
              alt="NeuronFrames Logo"
              class="logo-img"
            />
          </div>
        </div>
        <div class="dashboard-row">
          <!-- SHOP CARD -->
          <div
            class="stat-card shop-click"
            onclick="window.location.href='../shop.html'"
          >
            <div class="stat-label">
              <span>üõçÔ∏è</span>
              <span class="translatable" data-key="shop">Shop</span>
            </div>
            <div class="stat-value" id="starCount">üåü 0</div>
          </div>

          <!-- PROGRESS CARD -->
          <div
            class="stat-card"
            onclick="window.location.href='sessions.html'"
            style="cursor: pointer"
          >
            <div class="stat-label">
              <span>üìä</span>
              <span class="translatable" data-key="progress"
                >Progress & Report</span
              >
            </div>
            <div class="stat-value stat-progress" id="progressReport">
              <span class="translatable" data-key="viewNow">View Now</span>
            </div>
          </div>

          <div
            class="stat-card"
            onclick="window.location.href='user.html'"
            style="cursor: pointer"
          >
            <div class="stat-label">
              <span>üë§</span>
              <span class="translatable" data-key="user">User</span>
            </div>
            <div class="stat-value" id="usernameDisplay">
              <span class="translatable" data-key="user">User</span>
            </div>
          </div>
        </div>

        <div class="main-area">
          <div class="menu-list">
            <button class="menu-btn" id="normalModeBtn">
              <span>üîº</span>
              <span class="translatable" data-key="normalMode"
                >Normal Mode</span
              >
            </button>
            <button class="menu-btn" id="gameModeBtn">
              <span>üéÆ</span>
              <span class="translatable" data-key="gameMode">Game Mode</span>
            </button>
            <button class="menu-btn" id="gripModeBtn">
              <span>‚úä</span>
              <span class="translatable" data-key="gripMode">Grip Mode</span>
            </button>
            <button class="menu-btn" id="speechModeBtn">
              <span>üéôÔ∏è</span>
              <span class="translatable" data-key="speechMode"
                >Speech Mode</span
              >
            </button>
          </div>

          <div class="streak-card">
            <div class="streak-title">
              <span>üèÜ</span>
              <span class="translatable" data-key="streakTitle"
                >30-Day Streak!</span
              >
            </div>
            <div class="streak-ach">
              <span class="translatable" data-key="streakAchievements"
                >‚≠ê 5 Achievements</span
              >
            </div>
            <div class="streak-msg">
              <span class="translatable" data-key="streakMessage"
                >Keep going ‚ú®</span
              >
            </div>
          </div>
        </div>

        <button class="dashboard-logout" onclick="logout()">
          <span class="translatable" data-key="logout">Log Out</span>
        </button>
      </div>
    </div>

    <script>
      /* ===== LANGUAGE TOGGLE FUNCTIONALITY ===== */
      const translations = {
        en: {
          shop: "Shop",
          progress: "Progress & Report",
          user: "User",
          viewNow: "View Now",
          normalMode: "Normal Mode",
          gameMode: "Game Mode",
          gripMode: "Grip Mode",
          speechMode: "Speech Mode",
          streakTitle: "30-Day Streak!",
          streakAchievements: "‚≠ê 5 Achievements",
          streakMessage: "Keep going ‚ú®",
          logout: "Log Out",
        },
        th: {
          shop: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
          progress: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
          user: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
          viewNow: "‡∏î‡∏π‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
          normalMode: "‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
          gameMode: "‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏°",
          gripMode: "‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏±‡∏ö",
          speechMode: "‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏π‡∏î",
          streakTitle: "30 ‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô!",
          streakAchievements: "‚≠ê 5 ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          streakMessage: "‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‚ú®",
          logout: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
        },
      };

      /* ===== AUTHENTICATION HELPERS ===== */
      const USER_KEY = "nf_loggedInUser";
      const USERS_KEY = "nf_users";

      function checkAuth() {
        const u = localStorage.getItem(USER_KEY);
        const db = JSON.parse(localStorage.getItem(USERS_KEY) || "{}");
        return !(!u || !db[u]);
      }

      function refreshUserData() {
        const u = localStorage.getItem(USER_KEY);
        const db = JSON.parse(localStorage.getItem(USERS_KEY) || "{}");

        document.getElementById("usernameDisplay").textContent = u;
        document.getElementById("starCount").textContent =
          "üåü " + (db[u]?.stars ?? 0);
        document.getElementById("progressReport").textContent =
          translations[document.documentElement.lang].viewNow;
      }

      /* ===== LANGUAGE FUNCTIONS ===== */
      function changeLanguage(lang) {
        document.documentElement.lang = lang;
        document.querySelectorAll(".translatable").forEach((element) => {
          const key = element.getAttribute("data-key");
          if (translations[lang]?.[key]) {
            element.textContent = translations[lang][key];
          }
        });
        localStorage.setItem("nf_language", lang);
        // Update button text
        document.getElementById("languageToggle").textContent =
          lang === "en" ? "‡πÑ‡∏ó‡∏¢ / EN" : "TH / English";
      }

      function toggleLanguage() {
        const currentLang = document.documentElement.lang;
        const newLang = currentLang === "en" ? "th" : "en";
        changeLanguage(newLang);
      }

      /* ===== GAME MODE TOGGLE ===== */
      let currentMode = "single";

      function initGameModeToggle() {
        document
          .getElementById("singlePlayerOption")
          .addEventListener("click", () => switchMode("single"));
        document
          .getElementById("multiPlayerOption")
          .addEventListener("click", () => switchMode("multi"));
        updateButtonActions(currentMode);
      }

      function switchMode(mode) {
        if (mode === currentMode) return;

        const slider = document.getElementById("gameModeSlider");
        slider.classList.toggle("multiplayer", mode === "multi");

        document
          .getElementById("singlePlayerOption")
          .classList.toggle("active", mode === "single");
        document
          .getElementById("multiPlayerOption")
          .classList.toggle("active", mode === "multi");

        updateButtonActions(mode);
        currentMode = mode;
      }

      function updateButtonActions(mode) {
        const buttons = {
          normal: document.getElementById("normalModeBtn"),
          game: document.getElementById("gameModeBtn"),
          grip: document.getElementById("gripModeBtn"),
          speech: document.getElementById("speechModeBtn"),
        };

        // Clear existing click handlers
        Object.values(buttons).forEach((btn) => {
          btn.onclick = null;
          btn.style.display = "";
        });

        if (mode === "multi") {
          // Only show Game Mode button in multiplayer
          buttons.normal.style.display = "none"; // Hide Normal Mode
          buttons.grip.style.display = "none";
          buttons.speech.style.display = "none";

          // Set click handlers
          buttons.game.onclick = () =>
            (window.location.href = "/multi/mode.html");
        } else {
          // Show all buttons in single-player
          buttons.normal.style.display = "";
          buttons.grip.style.display = "";
          buttons.speech.style.display = "";

          // Set click handlers
          buttons.normal.onclick = () =>
            (window.location.href = "/ept/eptsel.html");
          buttons.game.onclick = () =>
            (window.location.href = "/gpt/mm/mmsel.html");
          buttons.grip.onclick = () => (window.location.href = "/its/its.html");
          buttons.speech.onclick = () =>
            (window.location.href = "/speech/speech.html");
        }
      }

      /* ===== LOGOUT ===== */
      function logout() {
        localStorage.removeItem(USER_KEY);
        window.location.href = "login.html";
      }

      /* ===== INITIALIZATION ===== */
      document.addEventListener("DOMContentLoaded", function () {
        // Check authentication
        if (!checkAuth()) {
          window.location.href = "login.html";
          return;
        }

        // Initialize language
        const savedLang = localStorage.getItem("nf_language") || "en";
        changeLanguage(savedLang);

        // Add event listener for language toggle
        document
          .getElementById("languageToggle")
          .addEventListener("click", toggleLanguage);

        // Initialize game mode toggle
        initGameModeToggle();

        // Load user data
        refreshUserData();
      });
    </script>
  </body>
</html>
